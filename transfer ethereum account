pragma solidity ^0.8.0;
contract SimpleWallet {
 address public owner;
 event Transfer(address indexed from, address indexed to, uint256 amount);
 event Withdrawal(address indexed from, uint256 amount);
 constructor() {
 owner = msg.sender;
 }
 modifier onlyOwner() {
 require(msg.sender == owner, "Only the owner can call this function");
 _;
 }
 // Function to transfer Ether to a specified address
 function transfer(address payable _to, uint256 _amount) external onlyOwner {
 require(_to != address(0), "Invalid recipient address");
 require(_amount > 0, "Transfer amount must be greater than 0");
 require(address(this).balance >= _amount, "Insufficient balance");
 _to.transfer(_amount);
 emit Transfer(address(this), _to, _amount);
 }
 // Function to withdraw Ether from the contract by the owner
 function withdraw(uint256 _amount) external onlyOwner {
 require(_amount > 0, "Withdrawal amount must be greater than 0");
 require(address(this).balance >= _amount, "Insufficient balance");
 owner.transfer(_amount);
 emit Withdrawal(owner, _amount);
 }
 // Function to check the contract's balance
 function getBalance() external view returns (uint256) {
 return address(this).balance;
}
}
